//---------------------------------------------------------------------------------------------------------------------
//  mico
//---------------------------------------------------------------------------------------------------------------------
//  Copyright 2020 Pablo Ramon Soria (a.k.a. Bardo91) pabramsor@gmail.com
//---------------------------------------------------------------------------------------------------------------------
//  Permission is hereby granted, free of charge, to any person obtaining a copy of this software
//  and associated documentation files (the "Software"), to deal in the Software without restriction,
//  including without limitation the rights to use, copy, modify, merge, publish, distribute,
//  sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all copies or substantial
//  portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
//  BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
//  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
//  OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//---------------------------------------------------------------------------------------------------------------------

#include <mico/slam/flow/savers/SaverTrajectory.h>
#include <Eigen/Eigen>

namespace mico{

    SaverTrajectory::SaverTrajectory(){
        createPolicy({{"Pose", "mat44"}});

        registerCallback({"Pose"}, 
                                [&](flow::DataFlow _data){                                
                                    Eigen::Matrix4f pose = _data.get<Eigen::Matrix4f>("Pose");
                                    Eigen::Quaternionf q(pose.block<3,3>(0,0));
                                    file_   << pose(0,3) << ", "<< pose(1,3) << ", "<< pose(2,3) << ", "
                                            << q.w() << ", " << q.x() << ", " << q.y() << ", " << q.z() << std::endl;
                                }
        );
    }
    
    bool SaverTrajectory::configure(std::unordered_map<std::string, std::string> _params){
        for(auto &param:_params){
            if(param.first == "path_folder"){
                pathFolder_ = param.second;
                system(("mkdir -p "+ pathFolder_).c_str());   // 666 
                file_.open(pathFolder_+"/trajectory_"+std::to_string(time(NULL))+".txt");
                file_ << "# File generated by mico-flow. Contains a trajectory" << std::endl;
                file_ << "# Format is: X, Y, Z, qW, qX, qY, qZ" << std::endl;
                return true;
            }
        }
        
        return false;
    }

    std::vector<std::string> SaverTrajectory::parameters(){
        return {"path_folder"};
    } 

}

